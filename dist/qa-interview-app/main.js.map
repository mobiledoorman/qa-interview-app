{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;;;;;;;;ACZyC;AACc;AAEvD,IAAM,MAAM,GAAW,EAAE,CAAC;AAM1B;IAAA;IAAgC,CAAC;IAApB,gBAAgB;QAJ5B,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,gBAAgB,CAAI;IAAD,uBAAC;CAAA;AAAJ;;;;;;;;;;;;ACT7B,2kF;;;;;;;;;;;ACAA,+DAA+D,+H;;;;;;;;;;;;;;;;;ACArB;AAO1C;IALA;QAME,UAAK,GAAG,kBAAkB,CAAC;QAC3B,iBAAY,GAAG;YACb,SAAS,EAAE,CAAC;YACZ,WAAW,EAAE,2BAA2B;YACxC,OAAO,EAAE;gBACP,CAAC,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,eAAe,EAAE,aAAa,EAAE,WAAW,CAAC;aAC7E;SACF;IACH,CAAC;IATY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,yFAAmC;;SAEpC,CAAC;OACW,YAAY,CASxB;IAAD,mBAAC;CAAA;AATwB;;;;;;;;;;;;;;;;;;;;;;;;;ACPiC;AACjB;AAC2G;AACrE;AAClC;AAEW;AACT;AACS;AAsBxD;IAAA;IAAyB,CAAC;IAAb,SAAS;QApBrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,oEAAgB;gBAChB,uEAAa;gBACb,4FAAuB;gBACvB,qEAAgB;gBAChB,iEAAe;gBACf,qEAAmB;gBACnB,oEAAkB;gBAClB,gEAAc;gBACd,qEAAmB;gBACnB,kEAAgB;gBAChB,0DAAe;aAChB;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;AC9BtB;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\n  <span>Scheduling Messages</span>\\n</mat-toolbar>\\n\\n<div class='app-container'>\\n  <h1 class=\\\"mat-h1\\\">Message 1</h1>\\n  <div class='message'>\\n    <mat-form-field>\\n      <input matInput [matDatepicker]=\\\"picker1\\\" placeholder=\\\"Send message on\\\">\\n      <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\n      <mat-datepicker #picker1></mat-datepicker>\\n    </mat-form-field>\\n\\n    <app-ngx-editor [placeholder]=\\\"'Enter text here...'\\\" [spellcheck]=\\\"true\\\" [config]=\\\"editorConfig\\\"></app-ngx-editor>\\n  </div>\\n\\n  <h1 class=\\\"mat-h1\\\">Message 2</h1>\\n  <div class='message'>\\n    <mat-form-field>\\n      <input matInput [matDatepicker]=\\\"picker2\\\" placeholder=\\\"Send message on\\\">\\n      <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\n      <mat-datepicker #picker2></mat-datepicker>\\n    </mat-form-field>\\n\\n    <app-ngx-editor [placeholder]=\\\"'Enter text here...'\\\" [spellcheck]=\\\"true\\\" [config]=\\\"editorConfig\\\"></app-ngx-editor>\\n  </div>\\n\\n  <h1 class=\\\"mat-h1\\\">Message 3</h1>\\n  <div class='message'>\\n    <mat-form-field>\\n      <input matInput [matDatepicker]=\\\"picker3\\\" placeholder=\\\"Send message on\\\">\\n      <mat-datepicker-toggle matSuffix [for]=\\\"picker3\\\"></mat-datepicker-toggle>\\n      <mat-datepicker #picker3></mat-datepicker>\\n    </mat-form-field>\\n\\n    <app-ngx-editor [placeholder]=\\\"'Enter text here...'\\\" [spellcheck]=\\\"true\\\" [config]=\\\"editorConfig\\\"></app-ngx-editor>\\n  </div>\\n\\n  <h1 class=\\\"mat-h1\\\">Message 4</h1>\\n  <div class='message'>\\n    <mat-form-field>\\n      <input matInput [matDatepicker]=\\\"picker4\\\" placeholder=\\\"Send message on\\\">\\n      <mat-datepicker-toggle matSuffix [for]=\\\"picker4\\\"></mat-datepicker-toggle>\\n      <mat-datepicker #picker4></mat-datepicker>\\n    </mat-form-field>\\n\\n    <app-ngx-editor [placeholder]=\\\"'Enter text here...'\\\" [spellcheck]=\\\"true\\\" [config]=\\\"editorConfig\\\"></app-ngx-editor>\\n  </div>\\n\\n  <h1 class=\\\"mat-h1\\\">Message 5</h1>\\n  <div class='message'>\\n    <mat-form-field>\\n      <input matInput [matDatepicker]=\\\"picker5\\\" placeholder=\\\"Send message on\\\">\\n      <mat-datepicker-toggle matSuffix [for]=\\\"picker5\\\"></mat-datepicker-toggle>\\n      <mat-datepicker #picker5></mat-datepicker>\\n    </mat-form-field>\\n\\n    <app-ngx-editor [placeholder]=\\\"'Enter text here...'\\\" [spellcheck]=\\\"true\\\" [config]=\\\"editorConfig\\\"></app-ngx-editor>\\n  </div>\\n\\n  <mat-toolbar class=\\\"action-buttons\\\">\\n    <button mat-raised-button color=\\\"primary\\\">Schedule</button>\\n  </mat-toolbar>\\n</div>\\n\\n<router-outlet></router-outlet>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'qa-interview-app';\n  editorConfig = {\n    minHeight: 5,\n    placeholder: \"Start typing your message\",\n    toolbar: [\n      [\"bold\", \"italic\", \"underline\", \"strikeThrough\", \"superscript\", \"subscript\"],\n    ],\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { MatToolbarModule, MatDatepickerModule, MatFormFieldModule, MatNativeDateModule, MatInputModule, MatButtonModule } from '@angular/material';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgxEditorModule } from 'ngx-editor';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    AppRoutingModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MatButtonModule,\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatNativeDateModule,\n    MatToolbarModule,\n    NgxEditorModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}